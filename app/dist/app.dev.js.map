{"version":3,"sources":["app.js"],"names":["allClearButton","document","querySelector","deleteButton","numberButtons","querySelectorAll","operationButton","equalButton","previousOperandTextElement","currentOperandTextElement","forEach","button","addEventListener","calculator","appendNumber","innerText","updateDisplay","chooseOperation","computed","clearScreen","Calculator","currentOperand","previousOperand","operation","undefined","number","includes","toString","stringNumber","integerDigits","parseFloat","split","decimalDigits","integerDisplay","isNaN","toLocaleString","maximumFractionDigits","getDisplayNumber","computations","previous","current","comput","slice"],"mappings":"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","sourcesContent":["//// How to store information for what is currentl type on the screen \r\n//variable declearation usung constant  \r\n\r\nconst allClearButton      = document.querySelector('[data-all-clear]')\r\nconst deleteButton        = document.querySelector('[data-delete]');\r\n\r\nconst numberButtons       = document.querySelectorAll('[data-number]');\r\nconst operationButton     = document.querySelectorAll('[data-operation]');\r\n\r\nconst equalButton         = document.querySelector('[data-equal]');\r\nconst previousOperandTextElement = document.querySelector('[data-previous-operand]');\r\nconst currentOperandTextElement  = document.querySelector('[data-current-operand]');\r\n\r\n\r\n\r\n\r\n// loop through all the numbers\r\nnumberButtons.forEach(button  =>{\r\n    button.addEventListener('click', ()=>{\r\n        calculator.appendNumber(button.innerText)\r\n        calculator.updateDisplay();\r\n    })\r\n})\r\n\r\n\r\n\r\n//loop through operation button + * - / \r\noperationButton.forEach(button  =>{\r\n    button.addEventListener('click', ()=>{\r\n        calculator.chooseOperation(button.innerText)\r\n        calculator.updateDisplay();\r\n    })\r\n})\r\n\r\n \r\n\r\n//create event linstener for equal to\r\nequalButton.addEventListener('click', ()=>{\r\n    calculator.computed();\r\n    calculator.updateDisplay();\r\n})    \r\n \r\n//event listener for clearing all value in  the screen\r\nallClearButton.addEventListener('click', ()=>{\r\n    calculator.clearScreen();\r\n    calculator.updateDisplay();\r\n})    \r\n \r\n\r\n\r\n// event listener for deleting vlaues one after the other\r\ndeleteButton.addEventListener('click', ()=>{\r\n    calculator.delete();\r\n    calculator.updateDisplay();\r\n})    \r\n \r\n\r\nclass Calculator{\r\n    constructor(previousOperandTextElement, currentOperandTextElement){\r\n        this.previousOperandTextElement = previousOperandTextElement;\r\n        this.currentOperandTextElement = currentOperandTextElement;\r\n        this.clearScreen();\r\n    }\r\n\r\n    clearScreen(){\r\n        //  the  functions  clearing values from the screen\r\n        this.currentOperand = '';\r\n        this.previousOperand ='';\r\n        this.operation = undefined;   \r\n    }\r\n    \r\n\r\n    appendNumber(number){\r\n        // check that period is not added multiple time\r\n        if(number ==='.'  && this.currentOperand.includes('.')) return;// this line  of code\r\n        //check for . in the numbers \r\n        this.currentOperand =  this.currentOperand.toString() + number.toString();\r\n        // this particular line of code don't allowed more than three (3) after .\r\n    }\r\n\r\n\r\n\r\n    getDisplayNumber(number){\r\n        const stringNumber  = number.toString()\r\n        const integerDigits = parseFloat(stringNumber.split('.')[0])\r\n        const decimalDigits = stringNumber.split('.')[1] \r\n      \r\n        let integerDisplay \r\n        if(isNaN(integerDigits)){\r\n            integerDisplay = ''\r\n\r\n        }else{\r\n            integerDisplay = integerDigits.toLocaleString('en', {\r\n                maximumFractionDigits:0\r\n            })\r\n        }\r\n        if(decimalDigits != null){\r\n            return `${integerDisplay}.${decimalDigits}`\r\n\r\n        }else{\r\n            return integerDisplay \r\n        }\r\n\r\n    }\r\n\r\n    updateDisplay(){\r\n        this.currentOperandTextElement.innerText  = this.getDisplayNumber(this.currentOperand);\r\n\r\n        if(this.operation != null){\r\n            this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`\r\n        } \r\n        else{\r\n            this.previousOperandTextElement.innerText= ''\r\n\r\n        }\r\n        \r\n}\r\n\r\ncomputed(){\r\n    let computations \r\n    let previous = parseFloat(this.previousOperand)\r\n    let current  = parseFloat(this.currentOperand)\r\n    if (isNaN(previous) || isNaN(current)) return\r\n\r\n    switch(this.operation){\r\n        case'รท':\r\n        computations = (previous / current);\r\n        break;\r\n        case'+':\r\n        computations = (previous + current);\r\n        break;\r\n        case'*':\r\n        computations = (previous * current);\r\n        break;\r\n        case'-':\r\n        computations = (previous - current);\r\n        break;\r\n        default:\r\n            return\r\n        \r\n    }\r\n    this.currentOperand = computations;//bring the final conputation result on currentOperand \r\n    this.operation = undefined // return nothing once any of mathmatical symbols are press\r\n    this.previousOperand ='' //clear the current value of  operations \r\n\r\n}\r\n\r\n\r\nchooseOperation(operation){\r\n    if(this.currentOperand ==='') return \r\n    if(this.previousOperand !== ''){\r\n        this.comput();\r\n    }\r\n    this.operation = operation\r\n    this.previousOperand = this.currentOperand\r\n    this.currentOperand = ''\r\n}\r\n\r\ndelete(){\r\n    this.currentOperand = this.currentOperand.toString().slice(0,-1);\r\n}\r\n \r\n\r\n}//end class calculator\r\n\r\n \r\n\r\n// create class calculator\r\nconst calculator = new  Calculator(previousOperandTextElement, currentOperandTextElement);\r\n"],"file":"app.dev.js"}