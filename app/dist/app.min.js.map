{"version":3,"sources":["app.js"],"names":["allClearButton","document","querySelector","deleteButton","numberButtons","querySelectorAll","operationButton","equalButton","forEach","button","calculator","addEventListener","innerText","appendNumber","chooseOperation","updateDisplay","clearScreen","previousOperandTextElement","Calculator","currentOperandTextElement","_classCallCheck","this","currentOperand","previousOperand","operation","undefined","number","includes","toString","maximumFractionDigits","isNaN","integerDisplay","parseFloat","stringNumber","split","decimalDigits","integerDigits","toLocaleString","concat","getDisplayNumber","previous","computations","current","comput","slice"],"mappings":"mZAGA,IAAMA,eAAsBC,SAASC,cAAc,oBAC7CC,aAAsBF,SAASC,cAAc,iBAE7CE,cAAsBH,SAASI,iBAAiB,iBAChDC,gBAAsBL,SAASI,iBAAiB,oBANtDE,YAAAN,SAAAC,cAAA,gBAEMF,2BAA+BE,SAAcA,cAAA,2BAC7CC,0BAA+BD,SAAcA,cAAnD,0BAaAE,cAAcI,QAAQ,SAAAC,GAAtBL,EAAAA,iBAAsB,QAAAK,WACZC,WAACC,aAAiBF,EAASG,WAC7BF,WAAWG,oBAUXH,gBAAWI,QAAAA,SAAAA,GACXJ,EAAAA,iBAAA,QAAA,WAFJA,WAAAI,gBAAAL,EAAAG,WAQJF,WAAAK,oBAOAf,YAAAA,iBAAeW,QAAiB,WAC5BD,WAAWM,WACXN,WAAWK,kBAOXL,eAAUC,iBAAV,QAAA,WACAD,WAAWK,cAFfL,WAAAK,kBAOsEZ,aAAAQ,iBAAA,QAAA,WANlED,WAAU,SAONA,WAAKO,sBAFPC,sBACF,SAAAA,EAAYD,EAA4BE,GAA0BC,gBAAAC,KAAAH,GAC9DG,KAAKJ,2BAA6BA,EAClCI,KAAKF,0BAIIA,EACTE,KAAAL,yEACAK,KAAKC,eAAiB,GACtBD,KAAKE,gBAAiB,GACtBF,KAAKG,eAAYC,uCAIRC,GAMZ,MAAAA,GAAAL,KAAAC,eAAAK,SAAA,OAFGN,KAAKC,eAAkBD,KAAKC,eAAeM,WAAaF,EAAOE,qDAMlDF,GAMb,IAKQG,EALLC,EAAHJ,EAAwBE,WACpBG,EAAAC,WAAAC,EAAAC,MAAA,KAAA,IAECC,EAAAF,EAAAC,MAAA,KAAA,GAYR,OARIH,EAHGD,MAAAM,GAGH,GAEaL,EAAVM,eAA4BF,KAAAA,CAE3BN,sBAAA,IAIR,MAAAM,EANO,GAAAG,OAAUP,EAAV,KAAAO,OAA4BH,GAS3BhB,0CAQJE,KAAAF,0BAAAP,UAAAS,KAAAkB,iBAAAlB,KAAAC,gBANoB,MAAlBD,KAAKG,UACJH,KAAKJ,2BAA2BL,UAAhC,GAAA0B,OAA+CjB,KAAKkB,iBAAiBlB,KAAKE,iBAA1E,KAAAe,OAA8FjB,KAAKG,WAWvGgB,KAAAA,2BAA2BjB,UAA/B,sCAOI,IAAAkB,EAPAD,EAAWR,WAAWX,KAAKE,iBAQ3BmB,EAAAV,WAAAX,KAAAC,gBACAmB,IAAAA,MAAAA,KAAgBD,MAAQE,GAAxBD,CALJ,OAAOpB,KAAKG,WAOR,IAAA,IACAiB,EAAYD,EAAYE,EACxB,MALA,IAAI,IAMJD,EAAAD,EAAAE,EACAD,MACA,IAAA,IAJAA,EAAgBD,EAAWE,EAK3B,MACI,IAAA,IAdRD,EAAAD,EAAAE,EAYI,MAKJ,QAHQ,OAKRrB,KAAAC,eAAAmB,EAEHpB,KAAAG,eAAAC,EAFGJ,KAAKE,gBAAiB,4CAOdA,GACJ,KAAAF,KAAAC,iBACH,KAAAD,KAAAE,iBADGF,KAAKsB,SAGTtB,KAAAG,UAAKD,EACLF,KAAAE,gBAAAF,KAAAC,eACHD,KAAAC,eAAA,qCAGGD,KAAAC,eAAAD,KAAsBC,eAAKA,WAALsB,MAA+BA,GAA/B,YASpBlC,WAAa,IAAKQ,WAAWD,2BAA4BE","file":"app.min.js","sourcesContent":["//// How to store information for what is currentl type on the screen \r\n//variable declearation usung constant  \r\n\r\nconst allClearButton      = document.querySelector('[data-all-clear]')\r\nconst deleteButton        = document.querySelector('[data-delete]');\r\n\r\nconst numberButtons       = document.querySelectorAll('[data-number]');\r\nconst operationButton     = document.querySelectorAll('[data-operation]');\r\n\r\nconst equalButton         = document.querySelector('[data-equal]');\r\nconst previousOperandTextElement = document.querySelector('[data-previous-operand]');\r\nconst currentOperandTextElement  = document.querySelector('[data-current-operand]');\r\n\r\n\r\n\r\n\r\n// loop through all the numbers\r\nnumberButtons.forEach(button  =>{\r\n    button.addEventListener('click', ()=>{\r\n        calculator.appendNumber(button.innerText)\r\n        calculator.updateDisplay();\r\n    })\r\n})\r\n\r\n\r\n\r\n//loop through operation button + * - / \r\noperationButton.forEach(button  =>{\r\n    button.addEventListener('click', ()=>{\r\n        calculator.chooseOperation(button.innerText)\r\n        calculator.updateDisplay();\r\n    })\r\n})\r\n\r\n \r\n\r\n//create event linstener for equal to\r\nequalButton.addEventListener('click', ()=>{\r\n    calculator.computed();\r\n    calculator.updateDisplay();\r\n})    \r\n \r\n//event listener for clearing all value in  the screen\r\nallClearButton.addEventListener('click', ()=>{\r\n    calculator.clearScreen();\r\n    calculator.updateDisplay();\r\n})    \r\n \r\n\r\n\r\n// event listener for deleting vlaues one after the other\r\ndeleteButton.addEventListener('click', ()=>{\r\n    calculator.delete();\r\n    calculator.updateDisplay();\r\n})    \r\n \r\n\r\nclass Calculator{\r\n    constructor(previousOperandTextElement, currentOperandTextElement){\r\n        this.previousOperandTextElement = previousOperandTextElement;\r\n        this.currentOperandTextElement = currentOperandTextElement;\r\n        this.clearScreen();\r\n    }\r\n\r\n    clearScreen(){\r\n        //  the  functions  clearing values from the screen\r\n        this.currentOperand = '';\r\n        this.previousOperand ='';\r\n        this.operation = undefined;   \r\n    }\r\n    \r\n\r\n    appendNumber(number){\r\n        // check that period is not added multiple time\r\n        if(number ==='.'  && this.currentOperand.includes('.')) return;// this line  of code\r\n        //check for . in the numbers \r\n        this.currentOperand =  this.currentOperand.toString() + number.toString();\r\n        // this particular line of code don't allowed more than three (3) after .\r\n    }\r\n\r\n\r\n\r\n    getDisplayNumber(number){\r\n        const stringNumber  = number.toString()\r\n        const integerDigits = parseFloat(stringNumber.split('.')[0])\r\n        const decimalDigits = stringNumber.split('.')[1] \r\n      \r\n        let integerDisplay \r\n        if(isNaN(integerDigits)){\r\n            integerDisplay = ''\r\n\r\n        }else{\r\n            integerDisplay = integerDigits.toLocaleString('en', {\r\n                maximumFractionDigits:0\r\n            })\r\n        }\r\n        if(decimalDigits != null){\r\n            return `${integerDisplay}.${decimalDigits}`\r\n\r\n        }else{\r\n            return integerDisplay \r\n        }\r\n\r\n    }\r\n\r\n    updateDisplay(){\r\n        this.currentOperandTextElement.innerText  = this.getDisplayNumber(this.currentOperand);\r\n\r\n        if(this.operation != null){\r\n            this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`\r\n        } \r\n        else{\r\n            this.previousOperandTextElement.innerText= ''\r\n\r\n        }\r\n        \r\n}\r\n\r\ncomputed(){\r\n    let computations \r\n    let previous = parseFloat(this.previousOperand)\r\n    let current  = parseFloat(this.currentOperand)\r\n    if (isNaN(previous) || isNaN(current)) return\r\n\r\n    switch(this.operation){\r\n        case'รท':\r\n        computations = (previous / current);\r\n        break;\r\n        case'+':\r\n        computations = (previous + current);\r\n        break;\r\n        case'*':\r\n        computations = (previous * current);\r\n        break;\r\n        case'-':\r\n        computations = (previous - current);\r\n        break;\r\n        default:\r\n            return\r\n        \r\n    }\r\n    this.currentOperand = computations;//bring the final conputation result on currentOperand \r\n    this.operation = undefined // return nothing once any of mathmatical symbols are press\r\n    this.previousOperand ='' //clear the current value of  operations \r\n\r\n}\r\n\r\n\r\nchooseOperation(operation){\r\n    if(this.currentOperand ==='') return \r\n    if(this.previousOperand !== ''){\r\n        this.comput();\r\n    }\r\n    this.operation = operation\r\n    this.previousOperand = this.currentOperand\r\n    this.currentOperand = ''\r\n}\r\n\r\ndelete(){\r\n    this.currentOperand = this.currentOperand.toString().slice(0,-1);\r\n}\r\n \r\n\r\n}//end class calculator\r\n\r\n \r\n\r\n// create class calculator\r\nconst calculator = new  Calculator(previousOperandTextElement, currentOperandTextElement);\r\n"]}